// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Interview should match the snapshot with all data passed in correctly 1`] = `
<MockedProvider
  addTypeName={false}
  addTypename={true}
>
  <ApolloProvider
    client={
      ApolloClient {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": MockLink {
          "addTypename": true,
          "mockedResponsesByKey": Object {},
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": false,
          "clientAwareness": Object {
            "name": undefined,
            "version": undefined,
          },
          "dataStore": DataStore {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
          },
          "fetchQueryRejectFns": Map {},
          "idCounter": 1,
          "inFlightLinkObservables": Map {},
          "link": MockLink {
            "addTypename": true,
            "mockedResponsesByKey": Object {},
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutationStore": MutationStore {
            "store": Object {},
          },
          "onBroadcast": [Function],
          "pollingInfoByQueryId": Map {},
          "queries": Map {},
          "queryDeduplication": true,
          "queryStore": QueryStore {
            "store": Object {},
          },
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "typeDefs": undefined,
        "version": "2.6.4",
        "watchQuery": [Function],
      }
    }
  >
    <Interview
      student={
        Object {
          "firstName": "Eric",
          "lastName": "O'Neill",
        }
      }
    >
      <div>
        <div>
          <div
            className="question-container"
          >
            <Swipeable
              delta={10}
              onSwipedLeft={[Function]}
              onSwipedRight={[Function]}
              preventDefaultTouchmoveEvent={true}
              rotationAngle={0}
              trackMouse={false}
              trackTouch={true}
            >
              <div>
                <Question
                  cur={1}
                  fs={
                    Object {
                      "next": [Function],
                      "note": [Function],
                      "score": [Function],
                      "skip": [Function],
                    }
                  }
                  id={1}
                  key="1"
                  pos={1}
                  question="Question 1"
                  scored={false}
                >
                  <div
                    className="interview-question-card shadow interview-card-focused"
                  >
                    <h1
                      className="interview-card-question"
                    >
                      Q: 
                      Question 1
                    </h1>
                    <h1
                      className="interview-card-position"
                    >
                      1
                    </h1>
                    <h3
                      className="header-notes"
                      id="notes-h3"
                    >
                      Notes:
                    </h3>
                    <textarea
                      className="box-fix interview-card-response"
                      form="interview-card-response-1"
                      name="response"
                      onChange={[Function]}
                    />
                    <form
                      className="interview-card-score"
                      id="score-form-1"
                      onChange={[Function]}
                    >
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="1"
                        />
                        Unsatisfactory
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="2"
                        />
                        Needs Work
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="3"
                        />
                        Good
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="4"
                        />
                        Exceptional
                        <br />
                      </label>
                    </form>
                    <button
                      className="interview-card-next-btn shadow"
                      onClick={[Function]}
                    >
                      Next
                    </button>
                    <button
                      className="interview-card-skip-btn"
                      onClick={[Function]}
                    >
                      Skip
                    </button>
                  </div>
                </Question>
                <Question
                  cur={1}
                  fs={
                    Object {
                      "next": [Function],
                      "note": [Function],
                      "score": [Function],
                      "skip": [Function],
                    }
                  }
                  id={2}
                  key="2"
                  pos={2}
                  question="Question 2"
                  scored={false}
                >
                  <div
                    className="interview-question-card shadow interview-card-first"
                  >
                    <h1
                      className="interview-card-question"
                    >
                      Q: 
                      Question 2
                    </h1>
                    <h1
                      className="interview-card-position"
                    >
                      2
                    </h1>
                    <h3
                      className="header-notes"
                      id="notes-h3"
                    >
                      Notes:
                    </h3>
                    <textarea
                      className="box-fix interview-card-response"
                      form="interview-card-response-2"
                      name="response"
                      onChange={[Function]}
                    />
                    <form
                      className="interview-card-score"
                      id="score-form-2"
                      onChange={[Function]}
                    >
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="1"
                        />
                        Unsatisfactory
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="2"
                        />
                        Needs Work
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="3"
                        />
                        Good
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="4"
                        />
                        Exceptional
                        <br />
                      </label>
                    </form>
                    <button
                      className="interview-card-next-btn shadow"
                      onClick={[Function]}
                    >
                      Next
                    </button>
                    <button
                      className="interview-card-skip-btn"
                      onClick={[Function]}
                    >
                      Skip
                    </button>
                  </div>
                </Question>
                <Question
                  cur={1}
                  fs={
                    Object {
                      "next": [Function],
                      "note": [Function],
                      "score": [Function],
                      "skip": [Function],
                    }
                  }
                  id={3}
                  key="3"
                  pos={3}
                  question="Question 3"
                  scored={false}
                >
                  <div
                    className="interview-question-card shadow interview-card-second"
                  >
                    <h1
                      className="interview-card-question"
                    >
                      Q: 
                      Question 3
                    </h1>
                    <h1
                      className="interview-card-position"
                    >
                      3
                    </h1>
                    <h3
                      className="header-notes"
                      id="notes-h3"
                    >
                      Notes:
                    </h3>
                    <textarea
                      className="box-fix interview-card-response"
                      form="interview-card-response-3"
                      name="response"
                      onChange={[Function]}
                    />
                    <form
                      className="interview-card-score"
                      id="score-form-3"
                      onChange={[Function]}
                    >
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="1"
                        />
                        Unsatisfactory
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="2"
                        />
                        Needs Work
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="3"
                        />
                        Good
                        <br />
                      </label>
                      <label>
                        <input
                          name="score"
                          type="radio"
                          value="4"
                        />
                        Exceptional
                        <br />
                      </label>
                    </form>
                    <button
                      className="interview-card-next-btn shadow"
                      onClick={[Function]}
                    >
                      Next
                    </button>
                    <button
                      className="interview-card-skip-btn"
                      onClick={[Function]}
                    >
                      Skip
                    </button>
                  </div>
                </Question>
              </div>
            </Swipeable>
            <div
              className="deck-btn-panel"
            >
              <button
                className="end-btn"
                onClick={[Function]}
              >
                End
              </button>
            </div>
          </div>
        </div>
        <div
          className="end-container shadow end-container-pre"
        >
          <div
            style={
              Object {
                "margin": "1.5rem",
              }
            }
          >
            <r
              activeItemIndex={0}
              activePosition="left"
              alwaysShowChevrons={false}
              calculateActualTranslateX={[Function]}
              classes={Object {}}
              disableSwipe={false}
              enablePlaceholder={false}
              firstAndLastGutter={false}
              gutter={32}
              infiniteLoop={false}
              leftChevron={
                <h1
                  className="caret"
                >
                  &lt;
                </h1>
              }
              numberOfCards={3}
              numberOfPlaceholderItems={0}
              onActiveStateChange={null}
              placeholderItem={null}
              requestToChangeActive={[Function]}
              rightChevron={
                <h1
                  className="caret"
                >
                  &gt;
                </h1>
              }
              showSlither={false}
              slidesToScroll={1}
            >
              <Measure
                bounds={true}
                margin={false}
                whitelist={
                  Array [
                    "width",
                    "height",
                  ]
                }
              >
                <Component
                  bounds={true}
                  contentRect={
                    Object {
                      "bounds": Object {},
                      "client": Object {},
                      "entry": Object {},
                      "margin": Object {},
                      "offset": Object {},
                      "scroll": Object {},
                    }
                  }
                  margin={false}
                  measure={[Function]}
                  measureRef={[Function]}
                  whitelist={
                    Array [
                      "width",
                      "height",
                    ]
                  }
                >
                  <Component
                    activeItemIndex={0}
                    activePosition="left"
                    alwaysShowChevrons={false}
                    calculateActualTranslateX={[Function]}
                    classes={Object {}}
                    containerHeight={0}
                    containerWidth={0}
                    disableSwipe={false}
                    enablePlaceholder={false}
                    firstAndLastGutter={false}
                    gutter={32}
                    infiniteLoop={false}
                    leftChevron={
                      <h1
                        className="caret"
                      >
                        &lt;
                      </h1>
                    }
                    measureRef={[Function]}
                    numberOfCards={3}
                    numberOfPlaceholderItems={0}
                    onActiveStateChange={null}
                    placeholderItem={null}
                    requestToChangeActive={[Function]}
                    rightChevron={
                      <h1
                        className="caret"
                      >
                        &gt;
                      </h1>
                    }
                    showSlither={false}
                    slidesToScroll={1}
                  >
                    <r
                      activeItemIndex={0}
                      activeItemTranslateX={0}
                      activePosition="left"
                      alwaysShowChevrons={false}
                      calculateActualTranslateX={[Function]}
                      classes={Object {}}
                      containerHeight={0}
                      containerWidth={0}
                      disableSwipe={false}
                      enablePlaceholder={false}
                      firstAndLastGutter={false}
                      gutter={32}
                      infiniteLoop={false}
                      items={
                        Array [
                          <Note
                            id={1}
                            question="Question 1"
                          />,
                          <Note
                            id={2}
                            question="Question 2"
                          />,
                          <Note
                            id={3}
                            question="Question 3"
                          />,
                        ]
                      }
                      leftChevron={
                        <h1
                          className="caret"
                        >
                          &lt;
                        </h1>
                      }
                      measureRef={[Function]}
                      nextItemIndex={0}
                      numberOfCards={3}
                      numberOfPlaceholderItems={0}
                      onActiveStateChange={null}
                      placeholderItem={null}
                      previousItemIndex={-1}
                      requestToChangeActive={[Function]}
                      rightChevron={
                        <h1
                          className="caret"
                        >
                          &gt;
                        </h1>
                      }
                      showSlither={false}
                      slidesToScroll={1}
                    >
                      <r
                        activeItemIndex={0}
                        activeItemTranslateX={0}
                        activePosition="left"
                        alwaysShowChevrons={false}
                        calculateActualTranslateX={[Function]}
                        classes={Object {}}
                        containerHeight={0}
                        containerWidth={0}
                        disableSwipe={false}
                        enablePlaceholder={false}
                        firstAndLastGutter={false}
                        gutter={32}
                        infiniteLoop={false}
                        items={
                          Array [
                            <Note
                              id={1}
                              question="Question 1"
                            />,
                            <Note
                              id={2}
                              question="Question 2"
                            />,
                            <Note
                              id={3}
                              question="Question 3"
                            />,
                          ]
                        }
                        leftChevron={
                          <h1
                            className="caret"
                          >
                            &lt;
                          </h1>
                        }
                        measureRef={[Function]}
                        nextItemIndex={0}
                        numberOfCards={3}
                        numberOfPlaceholderItems={0}
                        onActiveStateChange={null}
                        placeholderItem={null}
                        previousItemIndex={-1}
                        requestToChangeActive={[Function]}
                        rightChevron={
                          <h1
                            className="caret"
                          >
                            &gt;
                          </h1>
                        }
                        showSlither={false}
                        slidesToScroll={1}
                      >
                        <t
                          activeItemIndex={0}
                          activeItemTranslateX={0}
                          activePosition="left"
                          alwaysShowChevrons={false}
                          calculateActualTranslateX={[Function]}
                          classes={Object {}}
                          containerHeight={0}
                          containerWidth={0}
                          disableSwipe={false}
                          enablePlaceholder={false}
                          firstAndLastGutter={false}
                          gutter={32}
                          infiniteLoop={false}
                          items={
                            Array [
                              <Note
                                id={1}
                                question="Question 1"
                              />,
                              <Note
                                id={2}
                                question="Question 2"
                              />,
                              <Note
                                id={3}
                                question="Question 3"
                              />,
                            ]
                          }
                          leftChevron={
                            <h1
                              className="caret"
                            >
                              &lt;
                            </h1>
                          }
                          measureRef={[Function]}
                          nextItemIndex={0}
                          numberOfCards={3}
                          numberOfPlaceholderItems={0}
                          onActiveStateChange={null}
                          onWrapperTouchEnd={[Function]}
                          onWrapperTouchMove={[Function]}
                          onWrapperTouchStart={[Function]}
                          placeholderItem={null}
                          previousItemIndex={-1}
                          requestToChangeActive={[Function]}
                          rightChevron={
                            <h1
                              className="caret"
                            >
                              &gt;
                            </h1>
                          }
                          showSlither={false}
                          slidesToScroll={1}
                          touchRelativeX={0}
                        >
                          <styled.div
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "imYUvI",
                                    "rules": Array [
                                      "
  position: relative;
  ",
                                      [Function],
                                      "
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                            >
                              <div
                                className="sc-bdVaJa imYUvI"
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                              >
                                <Motion
                                  defaultStyle={
                                    Object {
                                      "translateX": 0,
                                    }
                                  }
                                  style={
                                    Object {
                                      "translateX": Object {
                                        "damping": 26,
                                        "precision": 0.01,
                                        "stiffness": 170,
                                        "val": 0,
                                      },
                                    }
                                  }
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bwzfXH",
                                            "isStatic": false,
                                            "lastClassName": "gwZiig",
                                            "rules": Array [
                                              "
  width: 100%;
  overflow-x: hidden;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bwzfXH",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-bwzfXH gwZiig"
                                      >
                                        <styled.div
                                          style={
                                            Object {
                                              "transform": "translateX(0px)",
                                            }
                                          }
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-htpNat",
                                                  "isStatic": false,
                                                  "lastClassName": "grBOFc",
                                                  "rules": Array [
                                                    "
  width: 100%;
  display: flex;
  flex-wrap: nowrap;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-htpNat",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={[Function]}
                                            style={
                                              Object {
                                                "transform": "translateX(0px)",
                                              }
                                            }
                                          >
                                            <div
                                              className="sc-htpNat grBOFc"
                                              style={
                                                Object {
                                                  "transform": "translateX(0px)",
                                                }
                                              }
                                            >
                                              <styled.div
                                                key="0"
                                                leftGutter={0}
                                                rightGutter={16}
                                                width={-21.333333333333332}
                                              >
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-bxivhb",
                                                        "isStatic": false,
                                                        "lastClassName": "fQCQuh",
                                                        "rules": Array [
                                                          "
  width: ",
                                                          [Function],
                                                          "px;
  flex-shrink: 0;
  margin-right: ",
                                                          [Function],
                                                          "px;
  margin-left: ",
                                                          [Function],
                                                          "px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-bxivhb",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  leftGutter={0}
                                                  rightGutter={16}
                                                  width={-21.333333333333332}
                                                >
                                                  <div
                                                    className="sc-bxivhb glDNnQ"
                                                    width={-21.333333333333332}
                                                  >
                                                    <Note
                                                      id={1}
                                                      key=".$0"
                                                      question="Question 1"
                                                    >
                                                      <div
                                                        className="interview-note-card"
                                                      >
                                                        <h1
                                                          className="interview-note-question"
                                                        >
                                                          Q: 
                                                          Question 1
                                                        </h1>
                                                        <h3
                                                          className=""
                                                        >
                                                          Skipped
                                                        </h3>
                                                      </div>
                                                    </Note>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                              <styled.div
                                                key="1"
                                                leftGutter={16}
                                                rightGutter={16}
                                                width={-21.333333333333332}
                                              >
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-bxivhb",
                                                        "isStatic": false,
                                                        "lastClassName": "fQCQuh",
                                                        "rules": Array [
                                                          "
  width: ",
                                                          [Function],
                                                          "px;
  flex-shrink: 0;
  margin-right: ",
                                                          [Function],
                                                          "px;
  margin-left: ",
                                                          [Function],
                                                          "px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-bxivhb",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  leftGutter={16}
                                                  rightGutter={16}
                                                  width={-21.333333333333332}
                                                >
                                                  <div
                                                    className="sc-bxivhb dIAqii"
                                                    width={-21.333333333333332}
                                                  >
                                                    <Note
                                                      id={2}
                                                      key=".$1"
                                                      question="Question 2"
                                                    >
                                                      <div
                                                        className="interview-note-card"
                                                      >
                                                        <h1
                                                          className="interview-note-question"
                                                        >
                                                          Q: 
                                                          Question 2
                                                        </h1>
                                                        <h3
                                                          className=""
                                                        >
                                                          Skipped
                                                        </h3>
                                                      </div>
                                                    </Note>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                              <styled.div
                                                key="2"
                                                leftGutter={16}
                                                rightGutter={0}
                                                width={-21.333333333333332}
                                              >
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-bxivhb",
                                                        "isStatic": false,
                                                        "lastClassName": "fQCQuh",
                                                        "rules": Array [
                                                          "
  width: ",
                                                          [Function],
                                                          "px;
  flex-shrink: 0;
  margin-right: ",
                                                          [Function],
                                                          "px;
  margin-left: ",
                                                          [Function],
                                                          "px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-bxivhb",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  leftGutter={16}
                                                  rightGutter={0}
                                                  width={-21.333333333333332}
                                                >
                                                  <div
                                                    className="sc-bxivhb fQCQuh"
                                                    width={-21.333333333333332}
                                                  >
                                                    <Note
                                                      id={3}
                                                      key=".$2"
                                                      question="Question 3"
                                                    >
                                                      <div
                                                        className="interview-note-card"
                                                      >
                                                        <h1
                                                          className="interview-note-question"
                                                        >
                                                          Q: 
                                                          Question 3
                                                        </h1>
                                                        <h3
                                                          className=""
                                                        >
                                                          Skipped
                                                        </h3>
                                                      </div>
                                                    </Note>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Motion>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </t>
                      </r>
                    </r>
                  </Component>
                </Component>
              </Measure>
            </r>
          </div>
          <h3
            id="header-final-remarks"
          >
            Final Remarks:
          </h3>
          <textarea
            className="box-fix interview-remarks"
            form="interview-response"
            name="remarks"
          />
          <form
            className="interview-score"
            id="interview-response"
            onSubmit={[Function]}
          >
            <label>
              <input
                name="score"
                type="radio"
                value="1"
              />
              Unsatisfactory
            </label>
            <br />
            <label>
               
              <input
                name="score"
                type="radio"
                value="2"
              />
              Needs Work
            </label>
            <br />
            <label>
              <input
                name="score"
                type="radio"
                value="3"
              />
              Good
            </label>
            <br />
            <label>
              <input
                name="score"
                type="radio"
                value="4"
              />
              Exceptional
            </label>
            <br />
            <input
              className="interview-submit"
              type="submit"
              value="✓"
            />
          </form>
        </div>
      </div>
    </Interview>
  </ApolloProvider>
</MockedProvider>
`;
