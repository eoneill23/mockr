// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavBar should match the snapshot with all data passed in correctly 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "ye8glt",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "ye8glt",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MockedProvider
      addTypeName={false}
      addTypename={true}
    >
      <ApolloProvider
        client={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "clearStoreCallbacks": Array [],
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": MockLink {
              "addTypename": true,
              "mockedResponsesByKey": Object {},
            },
            "localState": LocalState {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
              "client": [Circular],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "queryManager": QueryManager {
              "assumeImmutableResults": false,
              "clientAwareness": Object {
                "name": undefined,
                "version": undefined,
              },
              "dataStore": DataStore {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
              },
              "fetchQueryRejectFns": Map {},
              "idCounter": 1,
              "inFlightLinkObservables": Map {},
              "link": MockLink {
                "addTypename": true,
                "mockedResponsesByKey": Object {},
              },
              "localState": LocalState {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
                "client": [Circular],
              },
              "mutationStore": MutationStore {
                "store": Object {},
              },
              "onBroadcast": [Function],
              "pollingInfoByQueryId": Map {},
              "queries": Map {},
              "queryDeduplication": true,
              "queryStore": QueryStore {
                "store": Object {},
              },
              "ssrMode": false,
              "transformCache": WeakMap {},
            },
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
            },
            "typeDefs": undefined,
            "version": "2.6.4",
            "watchQuery": [Function],
          }
        }
      >
        <NavBar>
          <nav
            className="nav shadow"
          >
            <Link
              to="/dashboard"
            >
              <LinkAnchor
                href="/dashboard"
                navigate={[Function]}
              >
                <a
                  href="/dashboard"
                  onClick={[Function]}
                >
                  Mockr
                </a>
              </LinkAnchor>
            </Link>
            <Link
              to="/select-student"
            >
              <LinkAnchor
                href="/select-student"
                navigate={[Function]}
              >
                <a
                  href="/select-student"
                  onClick={[Function]}
                >
                  Start Interview
                </a>
              </LinkAnchor>
            </Link>
            <Link
              onClick={[Function]}
              to="/"
            >
              <LinkAnchor
                href="/"
                navigate={[Function]}
                onClick={[Function]}
              >
                <a
                  href="/"
                  onClick={[Function]}
                >
                  Log Out
                </a>
              </LinkAnchor>
            </Link>
          </nav>
        </NavBar>
      </ApolloProvider>
    </MockedProvider>
  </Router>
</MemoryRouter>
`;
